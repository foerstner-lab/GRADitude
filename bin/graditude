#!/usr/bin/env python3

"""GRADitude: a computational tool for the analysis of GRAD-seq data"""

import argparse
import bokeh.palettes
from graditudelib import normalize
from graditudelib import visualizing_kinetics
from graditudelib import elbow_curve
from graditudelib import silhouette
from graditudelib import PCA_analysis
from graditudelib import scaling
from graditudelib import robust_regression
from graditudelib import Clustering
from graditudelib import min_row_sum
from graditudelib import t_sne_colored_list_clustering_features
from graditudelib import correlation_between_genes
from graditudelib import selecting_ncRNAs
from graditudelib import modify_input
from graditudelib import correlation_rna_protein
from graditudelib import plot_network_graph
from graditudelib import distribution_correlation
from graditudelib import t_sne_proteins_data
from graditudelib import clustering_proteins
from graditudelib import correlation_specific_gene
from graditudelib import interactive_tsne_plot
from graditudelib import heatmap
from graditudelib import correlation_replicates_sequencing_data

__author__ = "Silvia Di Giorgio <silvia.digiorgio@uni-wuerzburg.de>, " \
             "Konrad Foerstner <konrad@foerstner.org>"
__license__ = "ISC license"
__email__ = "silvia.digiorgio@uni-wuerzburg.de"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--version", "-v", default=False, action="store_true",
        help="show version")
    subparsers = parser.add_subparsers(help="commands")

    modify_input_parser = subparsers.add_parser("filtering_tables",
                                                help="filter ERCC table based on the min row sum and"
                                                     "the gene quantification table based on "
                                                     "the column that we would like to drop")
    modify_input_parser.set_defaults(func=filtering_tables)
    modify_input_parser.add_argument('--feature_count_table', '-f',
                                     required=True,
                                     help="gene quantification table")
    modify_input_parser.add_argument("--ref_feature_count_table", "-r",
                                     required=True,
                                     help="ERCC reads table")
    modify_input_parser.add_argument("--min_row_sum", "-m", type=int,
                                     default=100, help="it calculates the sum of "
                                                       "the reads for each gene and discard the rows "
                                                       "with less then the sum")
    modify_input_parser.add_argument("--filtered_feature_count_table", "-ff",
                                     required=True, help="Filtered gene quantification table")
    modify_input_parser.add_argument("--filtered_ref_feature_count_table", "-fr",
                                     required=True, help="Filtered ERCC reads table")
    modify_input_parser.add_argument("--dropping_lisate", '-l', required=False, help='name of the lysate column')

    robust_regression_parser = subparsers.add_parser("robust_regression",
                                                     help="compare the ERCC concentration in mix "
                                                          "with the ERCC reads and take it out the outliers")
    robust_regression_parser.set_defaults(func=run_robust_regression)
    robust_regression_parser.add_argument('--ref_feature_count_table', '-r',
                                          required=True, help='Filtered ERCC reads table')
    robust_regression_parser.add_argument('--concentration_table', '-c',
                                          required=True, help="ERCC concentration table")
    robust_regression_parser.add_argument("--number_of_outliers", "-n",
                                          required=True, type=int, help="number of outliers")
    robust_regression_parser.add_argument('--number_of_ercc_in_common', '-nc',
                                          type=int)
    robust_regression_parser.add_argument("--used_mix", "-mix",
                                          required=True, type=int, help="define the ERCC mix used in the experiment,"
                                                                        "in case of mix1 and mix2 the "
                                                                        "--mix is either 3 or 4 ")
    robust_regression_parser.add_argument("--output_table", '-o',
                                          required=True, help="output table with ercc in common")

    # Currently done with DESeq2's approach - maybe add further options
    normalize_parser = subparsers.add_parser("normalize", help='calculate the ERCC size factor and '
                                                               'normalize the gene quantification '
                                                               'table based on that')
    normalize_parser.set_defaults(func=normalize_table)
    normalize_parser.add_argument('--feature_count_table', '-f', required=True,
                                  help="Filtered gene quantification table")
    normalize_parser.add_argument('--feature_count_start_column', '-fc', type=int,
                                  help="number of the column with the first fraction")
    normalize_parser.add_argument("--feature_count_end_column", "-fe", type=int,
                                  help="number of the column with the last fraction")
    normalize_parser.add_argument("--ref_feature_count_table", "-r", required=True)
    normalize_parser.add_argument("--ref_feature_count_start_column", "-rc", default=1, type=int)
    normalize_parser.add_argument("--ref_feature_count_end_column", "-re", default=-1, type=int)
    normalize_parser.add_argument("--normalized_table", "-o", required=True)
    normalize_parser.add_argument("--size_factor_table", "-s", default=None)

    scaling_parser = subparsers.add_parser("scaling", help="scaling the table "
                                                           "based on different scaling methods")
    scaling_parser.set_defaults(func=run_scaling)
    scaling_parser.add_argument('--feature_count_table', '-f', required=True)
    scaling_parser.add_argument('--feature_count_start_column', '-fc', required=True)
    scaling_parser.add_argument("--pseudo_count", '-p', type=int, default=1)
    scaling_parser.add_argument(
        "--scaling_method", '-sm', required=True,
        choices=["no_normalization", "normalized_to_max", "normalized_to_range", "log10", "log2"])
    scaling_parser.add_argument("--scaled_table", "-o", required=True)

    correlation_gene_gene_parser = subparsers.add_parser("correlation_gene_gene",
                                                         help="correlation all against all ")
    correlation_gene_gene_parser.set_defaults(func=run_correlation_gene_gene)
    correlation_gene_gene_parser.add_argument('--feature_count_table', '-f', required=True)
    correlation_gene_gene_parser.add_argument('--feature_count_start_column', '-fc', required=True)
    correlation_gene_gene_parser.add_argument('--output_file', '-o', required=True)

    selecting_specific_features = subparsers.add_parser("selecting_specific_features",
                                                        help="select specific features in the "
                                                             "normalized table (ncRNAs, CDS, etc.)")
    selecting_specific_features.set_defaults(func=select_specific_features)
    selecting_specific_features.add_argument('--normalized_table', '-n', required=True)
    selecting_specific_features.add_argument('--feature_count_start_column', '-fc',
                                             required=True, type=int)
    selecting_specific_features.add_argument('--features', '-f', nargs='+', required=True)
    selecting_specific_features.add_argument('--output_file', '-o', required=True)

    p_heatmap = subparsers.add_parser("heatmap",
                                      help="correlation all against all ")
    p_heatmap.set_defaults(func=plot_heatmap)
    p_heatmap.add_argument('--feature_count_table', '-f', required=True,
                           help="Filtered gene quantification table")
    p_heatmap.add_argument('--feature_count_start_column', '-fc', type=int,
                           help="number of the column with the first fraction")
    p_heatmap.add_argument("--y_label", "-label", required=True)
    p_heatmap.add_argument("--output_file", "-o", required=True)

    # For each fraction generate/write--output_format/
    # - Histogram 
    # - Max, mix, median, average
    # - all again all correlation (scatter plot, Pearson and Spearman cor. factor) 
    # generate_table_stats_parser = subparsers.add_parser("generate_table_stats")
    # generate_table_stats_parser.set_defaults(func=generate_table_stats)
    # generate_table_stats_parser.add_argument("--feature_count_table", "-c", required=True)
    # generate_table_stats_parser.add_argument("--feature_count_table", "-c", required=True)
    # generate_table_stats_parser.add_argument("--output_file", "-o" required=True)

    # histogram_of_fraction_parser = subparsers.add_parser("plot_histograms")
    # histogram_of_fraction_parser.set_defaults(func=plot_histograms)
    # histogram_of_fraction_parser.add_argument("--feature_count_table", "-c", required=True)
    # histogram_of_fraction_parser.add_argument('--feature_count_start_column', default=1)
    #
    modify_input_with_min_row_sum = subparsers.add_parser("find_min_rows",
                                                          help='select the rows with '
                                                               'a certain reads number ')
    modify_input_with_min_row_sum.set_defaults(func=find_min_rows)
    modify_input_with_min_row_sum.add_argument("--feature_count_table", "-f", required=True)
    modify_input_with_min_row_sum.add_argument('--feature_count_start_column', "-fc", required=True, type=int)
    modify_input_with_min_row_sum.add_argument("--min_row", '-m', required=True, type=int)
    modify_input_with_min_row_sum.add_argument("--output_file", "-o", required=True)

    plot_kinetics_parser = subparsers.add_parser("plot_kinetics", help='plot the kinetics')
    plot_kinetics_parser.set_defaults(func=plot_kinetics)
    plot_kinetics_parser.add_argument("--feature_count_table", "-f", required=True)
    plot_kinetics_parser.add_argument("--gene_name", "-gene", required=True)
    plot_kinetics_parser.add_argument('--feature_count_start_column', "-fc", required=True, type=int)
    plot_kinetics_parser.add_argument("--output_plot", "-o", required=True)
    plot_kinetics_parser.add_argument("--output_format", '-format', choices=["html", "pdf"],
                                      default="html")

    clustering_parser = subparsers.add_parser("clustering", help="unsupervised clustering "
                                                                 "using different methods")
    clustering_parser.set_defaults(func=clustering)
    clustering_parser.add_argument("--feature_count_table", "-f", required=True)
    clustering_parser.add_argument("--feature_count_start_column", "-fc", required=True, type=int)
    clustering_parser.add_argument("--number_of_clusters", '-nc', required=True, type=int)
    clustering_parser.add_argument("--pseudo_count", "-p", type=int,
                                   default=1)
    clustering_parser.add_argument("--clustering_methods", "-cm", required=True,
                                   choices=["k-means", "DBSCAN", 'hierarchical_clustering'])
    clustering_parser.add_argument("--epsilon", "-e", default=False,
                                   help='only for DBSCAN clustering', type=float)
    clustering_parser.add_argument("--min_samples", '-ms', default=False,
                                   help='only for DBSCAN clustering', type=int)
    clustering_parser.add_argument(
        "--scaling_method", '-sm', required=True,
        choices=["no_normalization", "normalized_to_max", "normalized_to_range", "log10", "log2"])
    clustering_parser.add_argument("--output_file", "-o", required=True)

    k_means_clustering_elbow_parser = subparsers.add_parser("k_means_clustering_elbow",
                                                            help="plot the elbow graph to choose"
                                                                 "the ideal number of clusters necessary for "
                                                                 "the k-means and the hierarchical clustering ")
    k_means_clustering_elbow_parser.set_defaults(func=generate_k_means_clustering_elbow)
    k_means_clustering_elbow_parser.add_argument("--feature_count_table", "-f", required=True)
    k_means_clustering_elbow_parser.add_argument("--feature_count_start_column", "-fc", required=True)
    k_means_clustering_elbow_parser.add_argument("--feature_count_end_column", "-fe", required=True)
    k_means_clustering_elbow_parser.add_argument("--min_number_of_clusters", '-min', required=True, type=int)
    k_means_clustering_elbow_parser.add_argument("--max_number_of_clusters", '-max', required=True, type=int)
    k_means_clustering_elbow_parser.add_argument("--output_plots1", '-o1', required=True)
    k_means_clustering_elbow_parser.add_argument("--output_plots2", '-o2', required=True)

    silhouette_parser = subparsers.add_parser("silhouette_analysis",
                                              help="used to study the "
                                                   "separation distance between the resulting clusters")
    silhouette_parser.set_defaults(func=silhouette_analysis)
    silhouette_parser.add_argument("--feature_count_table", "-c", required=True)
    silhouette_parser.add_argument("--feature_count_start_column", required=True)
    silhouette_parser.add_argument("--min_number_of_clusters", "-min", required=True, type=int)
    silhouette_parser.add_argument("--max_number_of_clusters", "-max", required=True, type=int)

    pca_parser = subparsers.add_parser("pca", help="principal component analysis")
    pca_parser.set_defaults(func=run_pca)
    pca_parser.add_argument("--feature_count_table", "-f", required=True)
    pca_parser.add_argument("--feature_count_start_column", "-fc", required=True, type=int)
    pca_parser.add_argument("--srna_list_files", "-list", nargs="+")
    pca_parser.add_argument("--output_file_colorized_by_clusters", "-o1", required=True)
    pca_parser.add_argument("--output_file_colorized_by_rna_class", "-o2", required=True)
    pca_parser.add_argument("--output_file_colorized_by_lists", "-o3", required=True)

    t_sne_colored_list_clustering_features_parser = subparsers.add_parser("t_sne", help="t-sne analysis")
    t_sne_colored_list_clustering_features_parser.set_defaults(func=run_t_sne_colored_using_different_methods)
    t_sne_colored_list_clustering_features_parser.add_argument("--feature_count_table", "-f", required=True)
    t_sne_colored_list_clustering_features_parser.add_argument("--feature_count_start_column", "-fc", required=True,
                                                               type=int)
    t_sne_colored_list_clustering_features_parser.add_argument("--perplexity", "-pp", required=True, type=int)
    t_sne_colored_list_clustering_features_parser.add_argument("--srna_list", "-list", nargs="+", default=False)
    t_sne_colored_list_clustering_features_parser.add_argument("--cluster_names", "-names", nargs="+", default=False)
    t_sne_colored_list_clustering_features_parser.add_argument("--color_set", "-set_colors",
                                                               default=bokeh.palettes.Set2)
    t_sne_colored_list_clustering_features_parser.add_argument("--url_link", "-url", required=False,
                                                               default="https://www.ncbi.nlm.nih.gov/gene/?term=@gene")
    t_sne_colored_list_clustering_features_parser.add_argument("--output_file1", "-o1", default=False,
                                                               help="output colorized using clusters information")
    t_sne_colored_list_clustering_features_parser.add_argument("--output_file2", "-o2", default=False,
                                                               help="output colorized using attributes information")
    t_sne_colored_list_clustering_features_parser.add_argument("--output_file3", "-o3", default=False,
                                                               help="output colorized using a specific list")

    correlation_rna_protein_parser = subparsers.add_parser("correlation_rnas_protein",
                                                           help="spearman correlation sequencing "
                                                                "data against proteins data")
    correlation_rna_protein_parser.set_defaults(func=correlation_rnas_protein)
    correlation_rna_protein_parser.add_argument("--feature_count_table", "-f", required=True)
    correlation_rna_protein_parser.add_argument("--feature_count_start_column", "-fc", required=True,
                                                type=int)
    correlation_rna_protein_parser.add_argument("--feature_count_end_column", "-fe", type=int)
    correlation_rna_protein_parser.add_argument("--protein_table", "-p", required=True)
    correlation_rna_protein_parser.add_argument("--protein_count_start_column", "-pc", required=True,
                                                type=int)
    correlation_rna_protein_parser.add_argument("--protein_count_end_column", "-pe", type=int)
    correlation_rna_protein_parser.add_argument("--output_file", "-o", default=False,
                                                help="output table")

    correlation_distribution_graph_parser = subparsers.add_parser("correlation_distribution_graph",
                                                                  help="distribution of the "
                                                                       "correlation coefficients")
    correlation_distribution_graph_parser.set_defaults(func=correlation_distribution_graph)
    correlation_distribution_graph_parser.add_argument("--table_with_correlation_coefficient", "-c", required=True)
    correlation_distribution_graph_parser.add_argument("--percentile", "-p", required=True,
                                                       type=int)
    correlation_distribution_graph_parser.add_argument("--output_plot", "-o", required=True)

    plot_network_graph_parser = subparsers.add_parser("plot_network_graph_parser",
                                                      help="network plot sequencing data "
                                                           "vs proteins data")
    plot_network_graph_parser.set_defaults(func=plot_network_graph_parser_rna_protein)
    plot_network_graph_parser.add_argument("--feature_count_table", "-f", required=True)
    plot_network_graph_parser.add_argument("--threshold", "-t", required=True, type=float)
    plot_network_graph_parser.add_argument("--max_size", "-max", required=True,
                                           type=int)
    plot_network_graph_parser.add_argument("--output_plot", "-o")

    clustering_parser_proteins = subparsers.add_parser("clustering_proteins",
                                                       help="unsupervised clustering of Mass spectrometry data")
    clustering_parser_proteins.set_defaults(func=clustering_proteins_data)
    clustering_parser_proteins.add_argument("--feature_count_table", "-f", required=True)
    clustering_parser_proteins.add_argument("--feature_count_start_column", "-fc", required=True, type=int)
    clustering_parser_proteins.add_argument("--feature_count_end_column", "-fe", required=True, type=int)
    clustering_parser_proteins.add_argument("--number_of_clusters", '-nc', required=True, type=int)
    clustering_parser_proteins.add_argument("--clustering_methods", "-cm", required=True,
                                            choices=["k-means", "DBSCAN", 'hierarchical_clustering'])
    clustering_parser_proteins.add_argument("--epsilon", "-e", default=False,
                                            help='only for DBSCAN clustering', type=float)
    clustering_parser_proteins.add_argument("--min_samples", '-ms', default=False,
                                            help='only for DBSCAN clustering', type=int)
    clustering_parser_proteins.add_argument("--output_file", "-o", required=True)

    t_sne_proteins_data_parser = subparsers.add_parser("t_sne_proteins",
                                                       help='t-sne analysis of Mass spectrometry data')
    t_sne_proteins_data_parser.set_defaults(func=t_sne_proteins_f)
    t_sne_proteins_data_parser.add_argument("--feature_count_table", "-f", required=True)
    t_sne_proteins_data_parser.add_argument("--feature_count_start_column", "-fc", required=True,
                                            type=int)
    t_sne_proteins_data_parser.add_argument("--perplexity", "-pp", required=True, type=int)
    t_sne_proteins_data_parser.add_argument("--output_file_colorized_by_clusters", "-o", required=True,
                                            help="output colorized using clusters information")

    correlation_specific_gene_parser = subparsers.add_parser("correlation_specific_gene",
                                                             help="spearman correlation of a "
                                                                  "specific feature against all")
    correlation_specific_gene_parser.set_defaults(func=run_correlation_specific_gene)
    correlation_specific_gene_parser.add_argument('--feature_count_table', '-f', required=True)
    correlation_specific_gene_parser.add_argument("--feature_count_start_column", "-fc", required=True)
    correlation_specific_gene_parser.add_argument("--feature_count_end_column", "-fe", type=int, default=0)
    correlation_specific_gene_parser.add_argument("--name_column_with_genes_name", "-nc", required=True)
    correlation_specific_gene_parser.add_argument("--name", "-name", required=True)
    correlation_specific_gene_parser.add_argument("--output_file", '-o')

    interactive_tsne_plot_parser = subparsers.add_parser("interactive_tsne_plot",
                                                         help="compare the ERCC concentration in mix "
                                                              "with the ERCC reads and take it out the outliers")
    interactive_tsne_plot_parser.set_defaults(func=run_interactive_tsne_plot)
    interactive_tsne_plot_parser.add_argument('--table_with_clusters', '-t', required=True)
    interactive_tsne_plot_parser.add_argument("--start_column", "-sc", required=True)
    interactive_tsne_plot_parser.add_argument("--output_file", '-o')

    correlation_replicates_sequencing_data_parser = subparsers.add_parser("replicates_correlation_sequencing", )
    correlation_replicates_sequencing_data_parser.set_defaults(func=run_replicates_correlation_sequencing)
    correlation_replicates_sequencing_data_parser.add_argument('--table_replicate1', '-r1', required=True)
    correlation_replicates_sequencing_data_parser.add_argument("--table_replicate2", "-r2", required=True)
    correlation_replicates_sequencing_data_parser.add_argument('--table_start_column' "-fc", required=True)
    correlation_replicates_sequencing_data_parser.add_argument('--table_end_column' "-fe", required=True)
    correlation_replicates_sequencing_data_parser.add_argument("--output_table", '-o')
    correlation_replicates_sequencing_data_parser.add_argument("--output_figure", '-f')
    # version_parser = subparsers.add_parser("version")
    # version_parser.set_defaults(func=show_version)

    # This is nice-to-have but not essential!
    # This subcommand will help to select rows and columns to build a
    # defined count table. It will also help to translate attribute
    # column into other columns (e.g. with gene names)
    # rearrange_count_table_parser = subparsers.add_parser("rearrange_count_table")

    args = parser.parse_args()
    if "func" in dir(args):
        args.func(args)
    else:
        parser.print_help()


def filtering_tables(args):
    modify_input.filtering_input(args.feature_count_table,
                                 args.ref_feature_count_table,
                                 args.min_row_sum,
                                 args.filtered_feature_count_table,
                                 args.filtered_ref_feature_count_table, args.dropping_lisate)


def normalize_table(args):
    normalize.normalized_count_table(
        args.feature_count_table, args.feature_count_start_column, args.feature_count_end_column,
        args.ref_feature_count_table, args.ref_feature_count_start_column, args.ref_feature_count_end_column,
        args.normalized_table, args.size_factor_table)


def run_correlation_gene_gene(args):
    correlation_between_genes.correlation(args.feature_count_table, args.feature_count_start_column, args.output_file)


def plot_kinetics(args):
    visualizing_kinetics.plot_kinetics(
        args.feature_count_table, args.gene_name, args.feature_count_start_column)


def select_specific_features(args):
    selecting_ncRNAs.selecting_specific_features(args.normalized_table,
                                                 args.feature_count_start_column, args.features, args.output_file)


def generate_k_means_clustering_elbow(args):
    elbow_curve.k_means_clustering_elbow(args.feature_count_table,
                                         args.feature_count_start_column,
                                         args.feature_count_end_column,
                                         args.min_number_of_clusters,
                                         args.max_number_of_clusters, args.output_plots1,
                                         args.output_plots2)


def silhouette_analysis(args):
    silhouette.silhouette_analysis(args.feature_count_table,
                                   args.feature_count_start_column,
                                   args.min_number_of_clusters,
                                   args.max_number_of_clusters)


def run_t_sne_colored_using_different_methods(args):
    t_sne_colored_list_clustering_features.t_sne(args.feature_count_table, args.feature_count_start_column,
                                                 args.perplexity,
                                                 args.srna_list,
                                                 args.cluster_names,
                                                 args.color_set,
                                                 args.url_link,
                                                 args.output_file1,
                                                 args.output_file2,
                                                 args.output_file3)


def run_pca(args):
    PCA_analysis.pca_(args.feature_count_table,
                      args.feature_count_start_column, args.srna_list_files,
                      args.output_file_colorized_by_clusters, args.output_file_colorized_by_rna_class,
                      args.output_file_colorized_by_lists)


def run_scaling(args):
    scaling.scaling_(args.feature_count_table,
                     args.feature_count_start_column,
                     args.pseudo_count,
                     args.scaling_method,
                     args.scaled_table)


def run_robust_regression(args):
    robust_regression.robust_regression(args.ref_feature_count_table,
                                        args.concentration_table, args.number_of_outliers,
                                        args.number_of_ercc_in_common, args.used_mix,
                                        args.output_table)


def clustering(args):
    Clustering.clustering(args.feature_count_table, args.feature_count_start_column, args.number_of_clusters,
                          args.pseudo_count, args.clustering_methods,
                          args.epsilon, args.min_samples,
                          args.scaling_method,
                          args.output_file)


def find_min_rows(args):
    min_row_sum.exclude_the_min_row_sum(args.feature_count_table, args.feature_count_start_column, args.min_row,
                                        args.output_file)


def correlation_rnas_protein(args):
    correlation_rna_protein.rna_protein_correlation(args.feature_count_table,
                                                    args.feature_count_start_column, args.feature_count_end_column,
                                                    args.protein_table, args.protein_count_start_column,
                                                    args.protein_count_end_column,
                                                    args.output_file)


def correlation_distribution_graph(args):
    distribution_correlation.distribution_correlation_graph(args.table_with_correlation_coefficient, args.percentile,
                                                            args.output_plot)


def plot_network_graph_parser_rna_protein(args):
    plot_network_graph.plot_network_graph_rna_protein(args.feature_count_table, args.threshold, args.max_size,
                                                      args.output_plot)


def clustering_proteins_data(args):
    clustering_proteins.clustering(args.feature_count_table, args.feature_count_start_column,
                                   args.feature_count_end_column,
                                   args.number_of_clusters,
                                   args.clustering_methods,
                                   args.epsilon, args.min_samples,
                                   args.output_file)


def t_sne_proteins_f(args):
    t_sne_proteins_data.t_sne_pr(args.feature_count_table, args.feature_count_start_column,
                                 args.perplexity,
                                 args.output_file_colorized_by_clusters)


def run_correlation_specific_gene(args):
    correlation_specific_gene.correlation_specific_gene_against_all(args.feature_count_table,
                                                                    args.feature_count_start_column,
                                                                    args.feature_count_end_column,
                                                                    args.name_column_with_genes_name,
                                                                    args.name, args.output_file)


def run_interactive_tsne_plot(args):
    interactive_tsne_plot.interactive_plot(args.table_with_clusters, args.start_column, args.output_file)


def plot_heatmap(args):
    heatmap.plot_heatmap(args.feature_count_table, args.feature_count_start_column,
                         args.y_label, args.output_file)


def run_replicates_correlation_sequencing(args):
    correlation_replicates_sequencing_data.correlation_replicates_sd(args.table_replicate1, args.table_replicate2,
                                                                     args.table_start_column, args.table_end_column,
                                                                     args.output_table, args.output_figure)


main()
